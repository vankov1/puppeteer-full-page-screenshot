{"version":3,"sources":["../src/index.js"],"names":["pageDown","page","isEnd","evaluate","window","scrollBy","innerHeight","scrollY","document","documentElement","scrollHeight","defaultOptions","fullPage","captureBeyondViewport","type","delay","fullPageScreenshot","options","pagesCount","extraPixels","viewport","scrollTo","pageHeight","Math","ceil","devicePixelRatio","height","width","innerWidth","path","pptrScreenshotOptions","images","index","waitForTimeout","image","screenshot","push","Jimp","read","write","getBase64Async","AUTO","cropped","pop","then","crop","getBufferAsync","mergedImage","direction","Promise","resolve","buffer","toString"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-await-in-loop */\nimport merge from 'merge-img';\nimport Jimp from 'jimp';\n\nconst pageDown = async (page) => {\n   const isEnd = await page.evaluate(() => {\n      window.scrollBy(0, window.innerHeight);\n      return window.scrollY >= document.documentElement.scrollHeight - window.innerHeight;\n   });\n\n   return isEnd;\n};\n\nconst defaultOptions = {\n   fullPage: false,\n   captureBeyondViewport: false,\n   type: 'png',\n   delay: 0,\n};\n\nconst fullPageScreenshot = async (page, options = {}) => {\n   const { pagesCount, extraPixels, viewport } = await page.evaluate(() => {\n      window.scrollTo(0, 0);\n      const pageHeight = document.documentElement.scrollHeight;\n      return {\n         pagesCount: Math.ceil(pageHeight / window.innerHeight),\n         extraPixels: (pageHeight % window.innerHeight) * window.devicePixelRatio,\n         viewport: {\n            height: window.innerHeight * window.devicePixelRatio,\n            width: window.innerWidth * window.devicePixelRatio,\n         },\n      };\n   });\n\n   const { path, delay, ...pptrScreenshotOptions } = { ...defaultOptions, ...options };\n\n   const images = [];\n   for (let index = 0; index < pagesCount; index += 1) {\n      if (delay) {\n         await page.waitForTimeout(delay);\n      }\n      const image = await page.screenshot(pptrScreenshotOptions);\n      await pageDown(page);\n      images.push(image);\n   }\n\n   if (pagesCount === 1) {\n      const image = await Jimp.read(images[0]);\n      if (path) image.write(path);\n      return await image.getBase64Async(Jimp.AUTO);\n   }\n\n   if (extraPixels > 0) {\n     // crop last image extra pixels\n     const cropped = await Jimp.read(images.pop())\n        .then((image) => image.crop(0, viewport.height - extraPixels, viewport.width, extraPixels))\n        .then((image) => image.getBufferAsync(Jimp.AUTO));\n\n     images.push(cropped);\n   }\n   const mergedImage = await merge(images, { direction: true });\n\n   if (path) {\n      await new Promise((resolve) => {\n         mergedImage.write(path, () => {\n            resolve();\n         });\n      });\n   }\n\n    const buffer = await mergedImage.getBufferAsync(Jimp.AUTO);\n   return buffer.toString('base64');\n};\n\nexport default fullPageScreenshot;\n"],"file":"index.js"}